//include 'hello-webmvc'
//include 'hello-commons'
//include 'cores:utils'
//findProject(':cores:utils')?.name = 'core.utils'
//include 'cores:dto'
//findProject(':cores:dto')?.name = 'core.dto'

rootProject.name = 'hello'
FileTree buildFiles = fileTree(rootDir) {
    List excludes = gradle.startParameter.projectProperties.get("excludeProjects")?.split(",")
    include '**/*.gradle', '**/*.gradle.kts'
    exclude 'build', '**/gradle', 'settings.gradle', 'buildSrc', '/build.gradle', '.*', 'out'
    exclude '**/grails3'
    if(excludes) {
        exclude excludes
    }
}

String rootDirPath = rootDir.absolutePath + File.separator
buildFiles.each { File buildFile ->
    boolean isDefaultName = 'build.gradle'.contentEquals(buildFile.name)
    boolean isKotlin = buildFile.name.endsWith(".kts")
    // println('----> buildFile.name : ' + buildFile.name + ", isDefaultName: " + isDefaultName)
    if(isDefaultName) {
        String buildFilePath = buildFile.parentFile.absolutePath
        String projectPath = buildFilePath.replace(rootDirPath, '').replace(File.separator, '-')
        String projectName = "$rootProject.name-$projectPath"
        include projectName
        project(":$projectName").projectDir = new File(buildFilePath)
    } else {
        String projectName
        if (isKotlin) {
            projectName = buildFile.name.replace('.gradle.kts', '')
        } else {
            projectName = buildFile.name.replace('.gradle', '')
        }
        String projectPath = ':' + projectName
        include projectPath
        def project = findProject("${projectPath}")
        project.name = projectName
        project.projectDir = buildFile.parentFile
        project.buildFileName = buildFile.name
    }
}

